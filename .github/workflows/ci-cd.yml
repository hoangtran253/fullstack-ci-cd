name: CI/CD Fullstack React + Node.js with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Test Backend
      - name: Setup Node.js for Backend
        working-directory: ./backend
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Backend Tests (dummy)
        working-directory: ./backend
        run: npm test

      # Test & Build Frontend
      - name: Setup Node.js for Frontend
        working-directory: ./frontend
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push Backend Image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest

      # Build & Push Frontend Image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy to Production Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "ðŸ”„ Pulling latest Docker images..."
            docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:latest
            docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:latest

            echo "ðŸ›‘ Stopping old containers..."
            cd ~/app || mkdir -p ~/app && cd ~/app
            [ -f docker-compose.yml ] && docker-compose down || echo "No existing services"

            echo "ðŸ’¾ Generating docker-compose.yml..."
            cat > docker-compose.yml << 'EOT'
version: '3.8'
services:
  backend:
    image: ghcr.io/REPLACE_ME_OWNER/REPLACE_ME_REPO-backend:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  frontend:
    image: ghcr.io/REPLACE_ME_OWNER/REPLACE_ME_REPO-frontend:latest
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
EOT

            # Tá»± Ä‘á»™ng thay tháº¿ tÃªn repo
            sed -i "s|REPLACE_ME_OWNER|${{ github.repository_owner }}|g" docker-compose.yml
            sed -i "s|REPLACE_ME_REPO|${{ github.event.repository.name }}|g" docker-compose.yml

            echo "ðŸš€ Starting services with Docker Compose..."
            docker-compose up -d

            echo "ðŸ§¹ Cleaning up unused Docker images..."
            docker image prune -af

            echo "âœ… Deployment completed successfully!"
          EOF